# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 0.5.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yR3047c1gNg-zh2N3jwMZV3bxLGPxtQT

ФИО:
"""

Хихлушка Екатерина

"""# **Задание 1**

Дан словарь, содержащий имена и возраст людей, напишите программу выводящую возраст человека по имени

Дано:

```
{"Alice": 25, "Bob": 30, "Charlie": 35}
```

Вввод:


```
Alice
```

Вывод:


```
Alice 25
```
"""

people={"Alice": 25, "Bob": 30, "Charlie": 35}
name=input("Введите имя: ")
if name in people:
  print(f"{name} {people[name]}")

"""# **Задание 2**

Дан список, состоящий из целых чисел, необходимо написать функцию считающую сумму всех положительных четных чисел списка

Ввод:

```
1, 2, 3, 4, 5, 6, 7, 8, 9
```

Вывод:


```
20
```

***Запрещено:***

*   Использование готовых функций для суммирования чисел
"""

A=[int(a) for a in input().split()]
count=0
for a in A:
  if a>0 and a%2==0:
    count+=a
print(count)

"""# **Задание 3**

Дан словарь, содержащий название фрукта и его цвет, выведите список всех желтых фруктов


Дано:

```
fruits_and_flowers = {
    "apple": "rose",
    "banana": "lily",
    "mango": "sunflower",
    "orange": "daisy",
    "lemon": "tulip",
    "grape": "orchid"
}
```

Вывод:


```
Yellow fruits:
banana
lemon
mango
```
"""

fruits_and_flowers = {
    "apple": "green",
    "banana": "yellow",
    "mango": "yellow",
    "orange": "orange",
    "lemon": "yellow",
    "grape": "violet"
}

def yellow_fruits(colors_of_fruits):
  yellow_fruits=[]
  for fruit in colors_of_fruits:
    if fruits_and_flowers[fruit]=='yellow':
      yellow_fruits.append(fruit)
  return yellow_fruits

print(yellow_fruits(fruits_and_flowers))

"""# **Задание 4**

Дан словарь, необходимо написать функцию меняющую ключ и значение местами

Дано:


```
{"a": 1, "b": 2, "c": 3}
```

Вывод:

```
{1: 'a', 2: 'b', 3: 'c'}
```
"""

dictionary={"a": 1, "b": 2, "c": 3}

def replacing_key_and_value(dictionary):
  new_dictionary={}
  for key, value in dictionary.items():
    new_dictionary[value]=key
  return new_dictionary

print(replacing_key_and_value(dictionary))

"""# **Задание 5**

Дан список слов, неограниченной длинны, сформируйте словарь, где в качестве ключа будет слово, а в качестве значения количество символов

**Критерии**


*   Словарь необходимо отсортировать по убыванию количества элементов в списке.
*   Подсчет элементов должен быть реализован в отдельной функции
*   Сортировка пары `ключ:значение` должна быть реализована также в виде отдельной функции




Дано:
```
['apple','banana','orange','apple','apple','banana']
```


Вывод:
```
{'apple':3, 'banana': 2, 'orange': 1}
```

***Запрещено:***

*   Использование готовых функций для сортировки словаря
*   Использование готовых функций для подсчета элементов
"""

words=['apple','banana','orange','apple','apple','banana']
def words_count(words):
  result = {}
  for word in words:
    if word in result:
      result[word] += 1
    else:
      result[word] = 1
  return result
print(words_count(words))

"""# **Задание 6**

Дан словарь, содержащий информацию о людях, необходимо:



*   Вывести всех людей старше 30 лет
*   Вывести список городов и количество людей из словаря проживающих в них
*   Вывести список профессий и список людей для каждой профессии

**Критерии**

Каждый из пунктов необходимо реализовать в виде функции
"""

people_info = {
    "Alice": {"age": 25, "city": "New York", "occupation": "Engineer"},
    "Bob": {"age": 30, "city": "Los Angeles", "occupation": "Designer"},
    "Charlie": {"age": 35, "city": "Chicago", "occupation": "Teacher"},
    "Diana": {"age": 28, "city": "Miami", "occupation": "Doctor"},
    "Ethan": {"age": 40, "city": "Seattle", "occupation": "Chef"},
    "Frank": {"age": 32, "city": "Atlanta", "occupation": "Lawyer"},
    "Gabriella": {"age": 29, "city": "San Francisco", "occupation": "Software Engineer"},
    "Harrison": {"age": 38, "city": "Denver", "occupation": "Architect"},
    "Isabella": {"age": 26, "city": "Washington D.C.", "occupation": "Journalist"},
    "Julian": {"age": 42, "city": "Miami", "occupation": "Musician"},
    "Kate": {"age": 31, "city": "Philadelphia", "occupation": "Nurse"},
    "Lucas": {"age": 36, "city": "Nashville", "occupation": "Businessman"},
    "Mia": {"age": 27, "city": "Atlanta", "occupation": "Artist"},
    "Natalie": {"age": 39, "city": "Portland", "occupation": "Writer"},
    "Oliver": {"age": 44, "city": "Minneapolis", "occupation": "Professor"},
    "Penelope": {"age": 33, "city": "San Diego", "occupation": "Marketing Manager"},
    "Quincy": {"age": 41, "city": "Nashville", "occupation": "Singer"},
    "Rachel": {"age": 34, "city": "Cleveland", "occupation": "Teacher"},
    "Sophia": {"age": 29, "city": "Nashville", "occupation": "Engineer"},
    "Tessa": {"age": 37, "city": "Miami", "occupation": "Lawyer"}
}

def find_people(people_info):
  people_over_30_list=[]
  for name in people_info:
    if people_info[name]['age']>30:
      people_over_30_list.append(name)
  return people_over_30_list


def cities_and_people(people_info):
  city_count={}
  for name in people_info:
    city=people_info[name]['city']
    if city in city_count:
      city_count[city]+=1
    else:
      city_count[city]=1
  return city_count

def occupations_and_people(people_info):
  professions = {}
  for name in people_info:
    occupation = people_info[name]['occupation']
    if occupation in professions:
      professions[occupation].append(name)
    else:
      professions[occupation] = [name]
  return professions

print('Люди старше 30 лет:',find_people(people_info))
print('Список городов и количество людей, проживающих в каждом из городов: ',cities_and_people(people_info))
print('Список городов и людей, проживающих в них: ',occupations_and_people(people_info))



"""# **Задание 7**

Задание: Разработка системы отзывов о предметах

Описание: Создать программу на Python для хранения и управления отзывами о предметах учебного курса. Программа должна позволять пользователям добавлять, просматривать и удалять отзывы, а также вычислять средний балл по заданному предмету.

**Функционал:**

*   Добавление отзыва и оценки:
   *   Пользователь может ввести название предмета, оценку (от 1 до 5) и текст отзыва.
   *   Отзывы должны храниться в структуре данных (например, словаре), где ключом будет название предмета, а значением - список отзывов (каждый отзыв может хранить оценку и комментарий).
*   Просмотр отзывов и оценок:
   *   Пользователь может запросить отзывы для указанного предмета.
   *   Если для указанного предмета есть отзывы, программа должна отобразить список всех отзывов и соответствующих оценок.
*   Удаление отзыва:
   *   Пользователь может удалить отзыв по индексу. Необходимо заранее уведомить пользователя о том, какие отзывы доступны для удаления.
   *   Программа должна обработать ситуацию, когда индекс введен неправильно.
*   Вычисление среднего балла по предмету:
   *   Пользователь может ввести название предмета, и программа должна вычислить и вывести средний балл по всем отзывам для этого предмета.
   *   Если отзывов нет, программа должна сообщить об этом.


**Критерии:**

*   Код должен быть оформлен в виде функций
*   Необходимо обрабатывать неправильный ввод пользователя
*   Должны быть комментарии к функциям
*   Присутсвует весь дополнительный функционал



**Опционально:**

Предлагаю вам добавить свои критерии оценки или вопросы, на которые должен ответить студент, чтобы оценить пару
"""

reviews = {
    'математика': [{'rating': 4, 'comment': 'Хороший предмет'}, {'rating': 5, 'comment': 'Очень интересно!'}, {'rating': 3, 'comment': 'Нормально'}],
    'химия': [{'rating': 5, 'comment': 'Увлекательные эксперименты'}, {'rating': 4, 'comment': 'Неплохо'}, {'rating': 4, 'comment': 'Хорошо объясняет'}],
    'русский язык': [{'rating': 3, 'comment': 'Много домашки'}, {'rating': 4, 'comment': 'Полезный язык'}, {'rating': 5, 'comment': 'Крутой преподаватель'}],
}

def add_review(subject, rating, comment):
    if subject not in reviews:
        reviews[subject] = []
    reviews[subject].append({"rating": rating, "comment": comment})
    print(f"Отзыв добавлен для предмета '{subject}'.")

def view_reviews(subject):
    if subject in reviews and reviews[subject]:
        print(f"Отзывы для предмета '{subject}':")
        index = 1
        for review in reviews[subject]:
            print(f"{index}. Оценка: {review['rating']}, Комментарий: {review['comment']}")
            index += 1
    else:
        print(f"Нет отзывов для предмета '{subject}'.")

def delete_review(subject):
  if subject in reviews:
      if reviews[subject]:
          print("Доступные отзывы для удаления:")
          i = 1
          for review in reviews[subject]:
              print(f"{i}. Оценка: {review['rating']}, Комментарий: {review['comment']}")
              i += 1
          print("Всего отзывов:", len(reviews[subject]))
          index = int(input("Введите индекс отзыва для удаления (1-" + str(len(reviews[subject])) + "): "))
          if 1 <= index <= len(reviews[subject]):
              del reviews[subject][index - 1]
              print(f"Отзыв по предмету '{subject}' удален успешно!")
          else:
                print("Неправильный индекс. Отзыв не удален.")
      else:
            print(f"Нет отзывов для предмета '{subject}'.")
  else:
        print("Предмет не найден")

def calculate_average_rating(subject):
    if subject in reviews and reviews[subject]:
        total_rating = sum(review['rating'] for review in reviews[subject])
        average_rating = total_rating / len(reviews[subject])
        print(f"Средний балл для предмета '{subject}': {average_rating:.2f}")
    else:
        print(f"Нет отзывов для предмета '{subject}'.")

print("\nВыберите действие:")
print("1. Добавить отзыв")
print("2. Просмотреть отзывы")
print("3. Удалить отзыв")
print("4. Вычислить средний балл")
print("5. Выход")
choice = input("Ваш выбор: ")
if choice == '1':
  subject = input("Введите название предмета: ")
  rating = int(input("Введите оценку (от 1 до 5): "))
  comment = input("Введите ответ на вопрос: Как прошла пара? Всё ли понравилось?: ")
  add_review(subject, rating, comment)
elif choice == '2':
  subject = input("Введите название предмета для просмотра отзывов: ")
  view_reviews(subject)
elif choice == '3':
  subject = input("Введите название предмета для удаления отзывов: ")
  delete_review(subject)
elif choice == '4':
  subject = input("Введите название предмета для вычисления среднего балла: ")
  calculate_average_rating(subject)
elif choice == '5':
  print("Выход из программы.")
else:
  print("Неверный выбор. Пожалуйста, попробуйте снова.")