# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 1.1.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15pG0TeAEuRYTBCAlMrAwlrQbB9Sd2TYC

**ФИО:**
"""

Хихлушка Екатерина

"""# Задание 1

**Описание:** Создайте иерархию классов для разных типов сотрудников в компании. Реализуйте родительский класс Employee и дочерние классы Manager и Developer. Каждый класс должен иметь метод для расчета зарплаты на основе различных критериев класса.


Отрабатываемый принцип: Наследование
"""

class Employee():
  def __init__(self,first_name, second_name, salary):
    self.first_name=first_name
    self.second_name=second_name
    self.salary=salary

  def calculate_total_salary(self):
    return int(self.salary)


class Manager(Employee):
  def __init__(self, first_name, second_name, salary, bonus):
    super().__init__(first_name, second_name, salary)
    self.bonus=bonus

  def calculate_total_salary(self):
    total_salary=self.salary+self.salary*self.bonus/100
    return int(total_salary)


class Developer(Employee):
  def __init__(self, first_name, second_name, salary, prize):
    super().__init__(first_name, second_name, salary)
    self.prize=prize

  def calculate_total_salary(self):
    total_salary=self.salary+self.prize
    return int(total_salary)

employee1=Employee('Иван', 'Петров', 50000)
manager1=Manager('Григорий', 'Ветров', 40000, 20)
developer1=Developer('Александр', 'Иванов', 70000, 20000)

print(f'Зарплата работника {employee1.first_name} {employee1.second_name} равна {employee1.calculate_total_salary()} рублей')
print(f'Зарплата менеджера {manager1.first_name} {manager1.second_name} равна {manager1.calculate_total_salary()} рублей')
print(f'Зарплата разработчика {developer1.first_name} {developer1.second_name} равна {developer1.calculate_total_salary()} рублей')

"""# Задание 2

**Описание:** Создайте иерархию классов для различных типов транспортных средств (Необходим один родительский класс и 3 дочерних). Реализуйте метод, который позволяет каждому транспортному средству возвращать собственное описание (Метод в каждом классе должен иметь одинаковое название). Продемонстрируйте вызов данного метода для каждого транспортного средства.


Отрабатываемый принцип: Полиморфизм
"""

class Transport():
  pass

class Car(Transport):
  def __init__(self, brand, model, release_year):
    self.brand=brand
    self.model=model
    self.release_year=release_year

  def get_description(self):
    return f'Машина: {self.brand} {self.model}, {self.release_year} года выпуска.'


class Bike(Transport):
  def __init__(self, brand, type):
    self.brand=brand
    self.type=type

  def get_description(self):
    return f'Велосипед: {self.brand} {self.type}.'


class Truck(Transport):
  def __init__(self, model, transport_company, capacity):
    self.model=model
    self.transport_company=transport_company
    self.capacity=capacity

  def get_description(self):
    return f'Грузовик модели {self.model} транспортной компании {self.transport_company} вместимостью {self.capacity} тонн.'

car=Car('Toyota','Camry','2014')
print(car.get_description())

bike=Bike('Yamaha','спортивный')
print(bike.get_description())

truck=Truck('Volvo','Альянс',10)
print(truck.get_description())

"""# Задание 3

Онлайн-магазин:
- Создайте модель для онлайн-магазина с классами Product, Order, Customer, и ShoppingCart.
- Product включает информацию о цене, наличии на складе и категории товара.
Order обрабатывает процесс покупки, включая расчет цены с учетом скидок и налогов.
- Customer управляет информацией о пользователе и его истории заказов.
- ShoppingCart позволяет добавлять, удалять и обновлять количество товаров перед оформлением заказа.
"""

class Product():
  def __init__(self, name, price, stock_availability, category):
    self.name=name
    self.price=price
    self.stock_availability=stock_availability
    self.category=category


class Order():
    def __init__(self, customer, discount=0, taxes=0.1):
        self.customer = customer
        self.items = []
        self.discount = discount
        self.taxes = taxes

    def add_item(self, product, quantity):
        self.items.append((product, quantity))

    def process_purchase(self):
        subtotal = sum(product.price * quantity for product, quantity in self.items)
        discount_amount = subtotal * (self.discount / 100)
        total_price = subtotal - discount_amount + (subtotal * self.taxes)

        details = ', '.join(f'{product.name} (x{quantity})' for product, quantity in self.items)
        return f'Корзина покупок: {details}. Общая цена: {total_price:.2f} рублейй'

class Customer():
    def __init__(self, name, email):
        self.name = name
        self.email = email
        self.orders = []

    def add_order(self, order):
        self.orders.append(order)

    def __str__(self):
        return f"Покупатель: {self.name}, Email: {self.email}"


class ShoppingCart:
    def __init__(self):
        self.items = {}

    def add_product(self, product, quantity):
        if product.name in self.items:
            self.items[product.name]['quantity'] += quantity
        else:
            self.items[product.name] = {'product': product, 'quantity': quantity}

    def remove_product(self, product):
        if product.name in self.items:
            del self.items[product.name]

    def update_quantity(self, product, quantity):
        if product.name in self.items:
            if quantity <= 0:
                self.remove_product(product)
            else:
                self.items[product.name]['quantity'] = quantity

    def view_cart(self):
        return [(item['product'], item['quantity']) for item in self.items.values()]

    def checkout(self, customer):
        order = Order(customer)
        for item in self.view_cart():
            order.add_item(item[0], item[1])
        customer.add_order(order)
        self.items.clear()
        return order

product1 = Product("Ноут", 100000, stock_availability=True, category="Электроника")
product2 = Product("Наушники", 29000, stock_availability=True, category="Аудио")

order = Order("Алиса", discount=10)
order.add_item(product1, 1)
order.add_item(product2, 2)


print(order.process_purchase())

"""# Задание 4

Симулятор космического корабля:
- Создайте симулятор управления космическим кораблем с классами SpaceShip, CrewMember, и Mission.
- SpaceShip имеет атрибуты для управления топливом, состоянием корпуса, и текущей скоростью.
- CrewMember контролирует здоровье, навыки, и роли в команде (например, пилот, инженер).
- Mission определяет цели, ресурсы, и возможные события (например, аварии, встречи с астероидами).
"""

import random

class SpaceShip:
    def __init__(self, name, fuel, hull_integrity, speed):
        self.name=name
        self.fuel=fuel
        self.hull_integrity=hull_integrity
        self.speed=speed

    def fly(self, distance):
        fuel_needed = distance * self.speed * 0.1
        if fuel_needed <= self.fuel:
            self.fuel -= fuel_needed
            print(f"{self.name} успешно пролетел {distance} километров.")
        else:
            print(f"{self.name} недостаточно топлива для полета.")

    def repair_hull(self, amount):
        self.hull_integrity += amount
        print(f"{self.name} восстановил целостность корпуса на {amount}.")

    def status(self):
        return f"Корабль: {self.name}, Топливо: {self.fuel}, Целостность корпуса: {self.hull_integrity}, Скорость: {self.speed}"


class CrewMember:
    def __init__(self, name, role, health, skills):
        self.name = name
        self.role = role
        self.health = health
        self.skills = skills

    def heal(self, amount):
        self.health += amount
        print(f"{self.name} восстановил здоровье на {amount}.")

    def status(self):
        return f"Член экипажа: {self.name}, Роль: {self.role}, Здоровье: {self.health}, Навыки: {self.skills}"


class Mission:
    def __init__(self, objectives, resources):
        self.objectives = objectives
        self.resources = resources

    def encounter_event(self):
        events = ["астероид", "космический пират", "другой корабль", "ничего"]
        event = random.choice(events)
        if event == "астероид":
            print("Произошла встреча с астероидом! Необходимо отремонтировать корпус.")
            return -20
        elif event == "космический пират":
            print("Вас атакуют космические пираты!")
            return -30
        elif event == "другой корабль":
            print("Вы встретили другой корабль. Никаких инцидентов.")
            return 0
        else:
            print("Никаких событий не произошло.")
            return 0


spaceship = SpaceShip("Galactic Voyager", 1000, 100, 20)
crew_member1 = CrewMember("Alice", "Pilot", 100, ["Navigation", "Combat"])
crew_member2 = CrewMember("Bob", "Engineer", 100, ["Repair", "Engineering"])

mission = Mission(["Исследовать планету X", "Собрать образцы"], ["Топливо", "Запчасти"])

print(spaceship.status())
print(crew_member1.status())
print(crew_member2.status())

spaceship.fly(100)
event_impact = mission.encounter_event()

if event_impact < 0:
    spaceship.repair_hull(event_impact)

print(spaceship.status())

"""# Дополнительно:

**Описание:** создайте консольную версию игры крестики-нолики, используя классы
"""

