# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 1.0.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1__tlJepgecPyuSFJFImSFgoir3hBza7u

ФИО:

# Задание 1

Задание:

Создайте класс с именем Rectangle который имеет:
- Атрибуты ширины и высоты.
- Метод расчета площади.
- Метод расчета периметра.
- Метод отображения размеров прямоугольника.

Создайте экземпляр класса Rectangleи продемонстрируйте его функциональность.
"""

class Rectangle:
    def __init__(self, a, b):
        self.width=a
        self.height=b

    def area(self):
        return self.width*self.height

    def perimeter(self):
        return 2 *(self.width+self.height)

    def show(self):
        print(f"Width: {self.width}, Height: {self.height}")

rect = Rectangle(5, 10)
rect.show()
print(f"Area: {rect.area()}")
print(f"Perimeter: {rect.perimeter()}")

"""# Задание 2

Задание: Создайте мини версию банковской системы:


Инструкции:

1. Создайте класс BankAccountсо следующими атрибутами:
    - account_holder -  владелец счета
    - balance - баланс счета

2. Реализуйте следующие методы:
    - Метод для инициализации владельца счета: имя владельца счета и установите начальный баланс на 0.
    - deposit(amount): Добавьте указанную сумму к балансу.
    - withdraw(amount): Вычесть указанную сумму из баланса, если средств достаточно; в противном случае вывести предупреждение.
    - get_balance(): Возврат текущего баланса.


Создайте объект класса и продемонстрируйте его возможности
"""

class BankAccount:
    def __init__(self, account_holder):
        self.account_holder=account_holder
        self.balance=0

    def deposit(self, amount):
      self.balance+=amount


    def withdraw(self, amount):
      self.balance-=amount


    def get_balance(self):
        return self.balance

account=BankAccount("Кирилл")
account.deposit(150)
account.withdraw(50)
print(f'Ваш текущий баланс: {account.get_balance()} рублей')

"""# Задание 3

Возьмите код и задание (Рыцарь и дракон) из предыдущей практики и реализуйте его с применением классов
"""

import random

class Character:
    def __init__(self, name, health, damage):
        self.name = name
        self.health = health
        self.damage = damage

    def is_alive(self):
        return self.health > 0

    def attack(self, other):
        damage = random.randint(self.damage - 5, self.damage + 5)
        other.health -= damage
        print(f"{self.name} наносит {damage} урона {other.name}!")

class Knight(Character):
    def __init__(self, name, armor, weapon):
        self.name = name
        self.health = 100
        self.damage = 15
        self.armor = armor
        self.weapon = weapon

class Dragon(Character):
    def __init__(self, name):
        self.name = name
        self.health = 150
        self.damage = 20


def get_knight_info():
    return {
        "name": input("Введите имя рыцаря: "),
        "armor": input("Введите тип доспехов: "),
        "weapon": input("Введите тип оружия: "),
    }


def get_dragon_name():
    return input("Введите имя дракона: ")


def main():
    knight_data = get_knight_info()
    knight = Knight(knight_data["name"], knight_data["armor"], knight_data["weapon"])
    dragon_name = get_dragon_name()
    dragon = Dragon(dragon_name)

    print("Начало битвы")
    while knight.is_alive() and dragon.is_alive():
        print(f"Здоровье рыцаря: {knight.health}, Здоровье дракона: {dragon.health}")
        knight.attack(dragon)
        if dragon.is_alive():
            dragon.attack(knight)

    if knight.is_alive():
        print("Победа рыцаря!")
    elif dragon.is_alive():
        print("Победа дракона!")
    else:
        print("Ничья!")

if __name__ == "__main__":
    main()

"""# Дополнительное задание

Задача: Система управления библиотекой

**Цель**
Создайте простую систему управления библиотекой, которая позволит пользователям добавлять книги, брать книги, возвращать книги и просматривать список доступных книг.

**Требования**

1. **Определение класса**:
   – Создайте класс с именем «Book» со следующими атрибутами:
     - `title`
     - `автор`
     - `isbn`
     - `is_borrowed` (по умолчанию `False`)

2. **Класс библиотеки**:
   - Создайте класс с именем Library, который управляет коллекцией книг.
   - Класс должен иметь следующие методы:
     - `__init__(self)`: инициализирует пустой список книг.
     - `add_book(self, book: Book)`: добавляет новую книгу в библиотеку.
     - `borrow_book(self, isbn: str)`: помечает книгу как заимствованную. Если книга не найдена или уже взята, выведите соответствующее сообщение.
     - `return_book(self, isbn: str)`: помечает книгу как возвращенную. Если книга не найдена или не была взята взаймы, выведите соответствующее сообщение.
     - `list_available_books(self)`: печатает список всех доступных книг в библиотеке.
     - `find_book(self, isbn: str)`: возвращает объект книги, если он найден, в противном случае возвращает `None`.

3. **Взаимодействие с пользователем**:
   - Создайте простое текстовое меню, которое позволит пользователям:
     - Добавить книгу
     - Одолжить книгу
     - Вернуть книгу
     - Список доступных книг
     - Выйти из программы
"""

class Book:
    def __init__(self, title, author, isbn):
        self.title = title
        self.author = author
        self.isbn = isbn
        self.is_borrowed = False

class Library:
    def __init__(self):
        self.books = []

    def add_book(self, book):
        self.books.append(book)

    def borrow_book(self, isbn):
        book = self.find_book(isbn)
        if book:
            if not book.is_borrowed:
                book.is_borrowed = True
                print(f"Книга '{book.title}' успешно одолжена.")
            else:
                print(f"Книга '{book.title}' уже одолжена.")
        else:
            print(f"Книга с ISBN '{isbn}' не найдена.")

    def return_book(self, isbn):
        book = self.find_book(isbn)
        if book:
            if book.is_borrowed:
                book.is_borrowed = False
                print(f"Книга '{book.title}' успешно возвращена.")
            else:
                print(f"Книга '{book.title}' не была одолжена.")
        else:
            print(f"Книга с ISBN '{isbn}' не найдена.")

    def list_available_books(self):
        available_books = [book for book in self.books if not book.is_borrowed]
        if available_books:
            print("Список доступных книг:")
            for book in available_books:
                print(f"- {book.title} by {book.author} (ISBN: {book.isbn})")
        else:
            print("Нет доступных книг.")

    def find_book(self, isbn):
        for book in self.books:
            if book.isbn == isbn:
                return book
        return None

def main():
    library = Library()

    while True:
        print("\nМеню:")
        print("1. Добавить книгу")
        print("2. Одолжить книгу")
        print("3. Вернуть книгу")
        print("4. Список доступных книг")
        print("5. Выйти")

        choice = input("Выберите действие: ")

        if choice == "1":
            title = input("Название книги: ")
            author = input("Автор книги: ")
            isbn = input("ISBN книги: ")
            library.add_book(Book(title, author, isbn))
            print("Книга добавлена.")
        elif choice == "2":
            isbn = input("ISBN книги для одолжения: ")
            library.borrow_book(isbn)
        elif choice == "3":
            isbn = input("ISBN книги для возврата: ")
            library.return_book(isbn)
        elif choice == "4":
            library.list_available_books()
        elif choice == "5":
            break
        else:
            print("Неверный выбор.")

if __name__ == "__main__":
    main()