# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 0.7.0"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13gUx9hCtrD-i6MJjAI42jX3CEVkSIXkk

ФИО:
"""

Хихлушка Екатерина

"""Напишите HTTP-запрос для получения информации о погоде в введенном городе из API. Можно использовать API: https://open-meteo.com/. Используйте метод GET.

Ввод
56.50, 60.35
Вывод
Сегодня (1.11) погода 20 ◦С, нет осадков, туман
"""

import requests

def get_weather(latitude, longitude):
  url=f"https://api.open-meteo.com/v1/forecast?latitude={latitude}&longitude={longitude}&hourly=temperature_2m,precipitation,weathercode"
  response=requests.get(url)
  data=response.json()

  hourly_data = data["hourly"]


  temperature = hourly_data["temperature_2m"][0]
  precipitation = hourly_data["precipitation"][0]
  weathercode = hourly_data["weathercode"][0]
  weather_description = get_weather_description(weathercode)
  today = hourly_data["time"][0].split("-")[2][:2] + "." + hourly_data["time"][0].split("-")[1]

  if precipitation == 0:
      precipitation_information="нет осадков"
  else:
      precipitation_information=f"{precipitation} мм"


  today_weather=f"Сегодня ({today}) погода {temperature} ◦С, {precipitation_information}, {weather_description}"
  return today_weather

def get_weather_description(weathercode):
  weather_descriptions = {
      0: "Ясно",
      2: "Небольшая облачность",
      3: "Облачно",
      48: "Туман",
      53: "Дождь",
      55: "Сильный дождь",
      63: "Снег",
      71: "Град",
      81: "Гроза",
      86: "Град",
      87: "Сильный град",
      95: "Штормовой ветер",
  }
  return weather_descriptions.get(weathercode, "Неизвестно")

latitude, longitude=map(float, input("Введите координаты (широта и долгота): ").split())

information_about_weather=get_weather(latitude, longitude)
print(information_about_weather)

"""## Задание 2. HTTP-запросы, ответы и покемоны


Создайте код программы, которая будет взаимодействовать с API, со следующим функионалом:

1. Используя метод GET, отправьте запрос на endpoint /pokemon, чтобы получить список первых 20 покемонов

2. Извлеките имена покемонов из ответа и выведите их списком

3. Введите с помощью input() название одного из покемонов


```
Имя покемона: clefairy
```



4. Отправьте GET-запрос, чтобы получить полную информацию о выбранном покемоне

5. Извлеките и выведите следующие данные о введенном покемоне:

     • Имя

     • Тип

     • Вес

     • Рост

     • Способности

Используйте PokéAPI (https://pokeapi.co/), который предоставляет информацию о покемонах, их характеристиках, типах и другую информацию.
"""

import requests

def twenty_pokemons():
    url = "https://pokeapi.co/api/v2/pokemon/?limit=20"
    response=requests.get(url)
    data=response.json()
    pokemon_names = [pokemon["name"] for pokemon in data["results"]]
    print("Список 20 покемонов:")
    for i, name in enumerate(pokemon_names):
        print(f"{i+1}. {name}")
    return pokemon_names

def get_pokemon_info(pokemon_name):
    url = f"https://pokeapi.co/api/v2/pokemon/{pokemon_name}"
    response = requests.get(url)
    data = response.json()
    name = data["name"]
    types = [type_["type"]["name"] for type_ in data["types"]]
    weight = data["weight"]
    height = data["height"]
    abilities = [ability["ability"]["name"] for ability in data["abilities"]]
    print(f"Имя: {name}")
    print(f"Тип: {', '.join(types)}")
    print(f"Вес: {weight}")
    print(f"Рост: {height}")
    print(f"Способности: {', '.join(abilities)}")

pokemon_names=twenty_pokemons()
pokemon_name=input("Имя покемона: ")
get_pokemon_info(pokemon_name)

"""## Задание 3. HTTP-запросы, ответы и посты

Создайте программу, которая будет взаимодействовать с JSONPlaceholder API, реализуя следующие функции:

1. Реализуйте функцию, которая выполняет GET-запрос к https://jsonplaceholder.typicode.com/posts и возвращает список постов в формате JSON

2. Реализуйте функцию, котороая получает вводимое ID поста, выполняет GET-запрос по ID и возвращает данные поста в формате JSON

3. Реализуйте функцию, которая выполняет обработку JSON из пункта 2 и выводит всю важную информацию в консоль
"""

def posts_list():
  url="https://jsonplaceholder.typicode.com/posts"
  response=requests.get(url)
  return response.json()


def data_of_post(post_ID):
  url=f"https://jsonplaceholder.typicode.com/posts/{post_ID}"
  response=requests.get(url)
  return response.json()

def information_about_post(post_data):
  print(f"ID: {post_data['id']}")
  print(f"Заголовок: {post_data['title']}")
  print(f"Текст: {post_data['body']}")
  print(f"Пользователь: {post_data['userId']}")

print(posts_list())
post_ID=int(input("Введите ID поста: "))
post_data=data_of_post(post_ID)
information_about_post(post_data)

"""## Задание 4. HTTP-запросы, ответы и работа с постами

Создайте программу, которая будет взаимодействовать с JSONPlaceholder API (из предыдущего задания), реализуя новые функции:

1. Реализуйте функцию, которая принимает заголовок, содержимое и ID пользователя (информация вводится с помощью input()), выполняет POST-запрос для создания нового поста и возвращает информацию о созданном посте в формате JSON


```
Заголовок: Новый пост
Содержимое поста: Тут должно находиться содержимое нового поста...
ID пользователя: 10
```



2. Реализуйте функцию, которая принимает ID поста, новый заголовок и новое содержимое, выполняет PUT-запрос и возвращает обновлённый пост в формате JSON

3. Реализуйте функцию, которая принимает ID поста, выполняет DELETE-запрос и возвращает статус-код ответа
"""

import requests

def create_new_post(title,body,userId):
  url="https://jsonplaceholder.typicode.com/posts"
  data={"title": title, "body": body, "userId": userId}
  response=requests.post(url, json=data)
  return response.json()

def create_new_post(title, body, userId):
  url="https://jsonplaceholder.typicode.com/posts"
  data={"title": title, "body": body, "userId": userId}
  response=requests.post(url, json=data)
  if response.status_code==201:
      return response.json()
  else:
      print(f"Ошибка создания поста: {response.status_code}")
      return None


def delete_post(post_ID):
    url=f"https://jsonplaceholder.typicode.com/posts/{post_ID}"
    response=requests.delete(url)
    return response.status_code

def information_about_post(post_data):
  if post_data:
      print(f"ID: {post_data['id']}")
      print(f"Заголовок: {post_data['title']}")
      print(f"Текст: {post_data['body']}")
      print(f"Пользователь: {post_data['userId']}")
  else:
      print("Ошибка: Данные поста не получены.")

title = input('Заголовок: ')
body = input('Содержимое поста: ')
userId = input('ID пользователя: ')
information_about_post(create_new_post(title, body, int(userId)))

id = int(input("Введите ID поста для обновления: "))
new_title = input("Новый заголовок: ")
new_body = input("Новое содержимое: ")
information_about_post(update_post(int(id), new_title, new_body))

post_id=int(input("Введите ID поста для удаления: "))
status_code=delete_post(post_id)
if status_code==200:
  print(f"Пост с ID {post_id} успешно удален")
else:
  print(f"Ошибка удаления поста: {status_code}")

"""## Задание 5. HTTP-запросы, ответы и пёсики

Создайте программу, которая будет взаимодействовать с Dog API, которая позволит получать список пород собак, вводить несколько пород и получать их фотогрфии.

Этапы:

1. Создайте функцию, которая использует метод GET и возвращает список всех пород собак в формате нумерованного списка

2. Реализуйте возможность ввода нескольких пород собак через запятую


```
african, chow, dingo
```



3. Создание функции, которая реализует запрос, возвращает и выводит изображениия собак, породы которых были введены до этого


Используйте Dog API (https://dog.ceo/dog-api/), который предоставляет информацию о породах собак и их изображения.

"""

import requests
from PIL import Image
from IPython.display import display
import io
from io import BytesIO

def dogs_list():
    url="https://dog.ceo/api/breeds/list/all"
    response=requests.get(url)
    breeds=response.json()["message"]
    return ([f"{i+1}. {breed}" for i, breed in enumerate(breeds)])

def dog_images(dog_names):
    for breed in breed_names:
        url = f"https://dog.ceo/api/breed/affenpinscher/images/random"
        response=requests.get(url)
        if response.status_code == 200:
          image_url = response.json()['message']
        res = requests.get(image_url)
        img = Image.open(io.BytesIO(res.content))
        display(img)
print("Список пород собак:")
print(dogs_list())
breeds_of_dogs=input("Введите породы собак: ").split()
breed_names = []
for breed in breeds_of_dogs:
    breed_names.append(breed)
dog_images(breed_names)