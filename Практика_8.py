# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 0.9.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZzZ7fat2lQLeqMM6RQjHpjk6zdufpl6h

ФИО
"""

Хихлушка Екатерина

"""# Дисклеймер

В данной практике вам необходимо применить все ваши знания по темам:

- Функции
- Словари
- Списки
- Множества
- Условные конструкции
- Запросы

и все что было изучено на прошлых практических занятиях

В каждом задании кратко описаны функции, которые необходимо реализовать, детали реализации вы должны продумать самостоятельно.

# **Дисклеймер 2**

В данной практике также учитывается критерий: чистота и читаемость кода

# Задание 0

Создайте функцию по нахождению уникальных элементов из двух списков



```
a = [1, 2, 3, 4]
b = [3, 4, 5, 6]
```
"""

a = [1, 2, 3, 4]
b = [3, 4, 5, 6]

def find_unique_elements(a, b):
    unique_elements=[]
    for number in a:
        if number not in b:
            unique_elements.append(number)
    for number in b:
        if number not in a:
            unique_elements.append(number)
    return unique_elements

print(find_unique_elements(a, b))

"""# Задание 1

Симулятор виртуального питомца

Цель: создать виртуальный симулятор домашних животных, в котором пользователи смогут заводить питомцев и ухаживать за ними.

Требования:

- Функция для усыновления питомца (имя, тип, возраст).
- Функция для того, чтобы покормить питомца, поиграть с ним или уложить его спать.
- Функция для отображения состояния питомца (голод, радость, энергия).
"""

pet = {}

def adopt_pet(name, pet_type, age):
    pet["name"]=name
    pet["type"]=pet_type
    pet["age"]=age
    pet["hunger"]=0
    pet["happiness"]=5
    pet["energy"]=10
    print(f"Вы усыновили {pet_type} по имени {name}")

def pet_care(action):
    if action=="покормить":
        pet["hunger"]-=5
        pet["happiness"]+=1
        pet["energy"]-=1
        print(f"{pet['name']} сыт и счастлив!")
    elif action=="играть":
        pet["happiness"]+=5
        pet["energy"]-=5
        print(f"Вы поиграли с {pet['name']}!")
    elif action=="спать":
        pet["energy"]+=5
        pet["happiness"]+=1
        print(f"{pet['name']} сладко спит.")
    else:
        print("Неверное действие.")

def show_pet_status():
    print(f"Статус {pet['name']}")
    print(f"Голод: {pet['hunger']}/10")
    print(f"Счастье: {pet['happiness']}/10")
    print(f"Энергия: {pet['energy']}/10")


name = input("Введите имя питомца: ")
pet_type = input("Введите тип питомца (кот, собака и т.д.): ")
age = int(input("Введите возраст питомца: "))

adopt_pet(name, pet_type, age)

show_pet_status()
action = input("Что вы хотите сделать? (покормить/играть/спать/выйти): ")
pet_care(action)

"""# Задание 2

Рыцарь и дракон

Цель: создать небольшую игру, в которой вам необходимо играть за рыцаря и сразиться с драконом

Требования:

- Создание персонажа (имя, информация о доспехах, оружии, урон, здоровье)
- Управление персонажем и мини сюжет
- Создание дракона (Имя, информация о здоровье и уроне)
- Боевая система (нанесение и получение урона, урон должен быть случайным в заданном диапазоне)
- Реализовать бой между драконом и рыцарем
"""

import random

def create_knight():
    name = input("Введите имя рыцаря: ")
    armor = input("Введите тип доспехов: ")
    weapon = input("Введите тип оружия: ")
    return {
        "name": name,
        "armor": armor,
        "weapon": weapon,
        "урон": 15,
        "здоровье": 100,
    }

def create_dragon():
    name = "Дракон Кеша"
    return {
        "name": name,
        "здоровье": 150,
        "урон": 20,
    }

def attack(attacker, defender):
    damage = random.randint(attacker["урон"] - 5, attacker["урон"] + 5)
    defender["здоровье"] -= damage
    print(f"{attacker['name']} наносит {damage} урона {defender['name']}!")

def is_alive(character):
    return character["здоровье"] > 0

knight = create_knight()
dragon = create_dragon()

print("Начало битвы")

while is_alive(knight) and is_alive(dragon):
    print(f"Здоровье рыцаря: {knight['здоровье']}")
    print(f"Здоровье дракона: {dragon['здоровье']}")
    action = input("Выберите действие: (атаковать/бежать): ")

    if action == "атаковать":
        attack(knight, dragon)
        if is_alive(dragon):
            attack(dragon, knight)
    elif action == "бежать":
        print("Рыцарь сбежал!")
        break
    else:
        print("Неверное действие")

if is_alive(knight):
    print("Победа!")
elif is_alive(dragon):
    print("Дракон победил!")
else:
    print("Ничья!")

"""# Задание 3

Цель - создать менеджера команды Pokémon, который позволит пользователям:

- Добавлять покемонов в свою команду. (если такого покемона еще нет в команде)
- Удалять покемонов из их команды.
- Просматривать подробную информацию обо всех покемонах в команде.
- Находить покемона по имени.
- Устраивать тренировочный бой между двумя покемонами

Для данной задачи используйте: https://pokeapi.co/
"""

import requests
import random

def get_pokemon_data(pokemon_name):
    url=f"https://pokeapi.co/api/v2/pokemon/{pokemon_name}"
    response=requests.get(url)
    if response.status_code==200:
        data=response.json()
        types=[]
        for type in data["types"]:
          types.append(type["type"]["name"])

        abilities=[]
        for a in data["abilities"]:
            abilities.append(a["ability"]["name"])

        stats = {}
        for s in data["stats"]:
            stats[s["stat"]["name"]] = s["base_stat"]

        return types,abilities,stats


def simple_battle(pokemon1, pokemon2):
    p1_attack=random.randint(1, pokemon1['stats'].get('attack', 1))
    p2_attack = random.randint(1, pokemon2['stats'].get('attack', 1))
    print(f"{pokemon1['name']} атакует с силой {p1_attack}!")
    print(f"{pokemon2['name']} атакует с силой {p2_attack}!")
    if p1_attack > p2_attack:
        print(f"{pokemon1['name']} побеждает!")
    elif p2_attack > p1_attack:
        print(f"{pokemon2['name']} побеждает!")
    else:
        print("Ничья!")

team=[]


print("1. Добавить покемона")
print("2. Удалить покемона")
print("3. Просмотреть команду")
print("4. Найти покемона")
print("5. Тренировочный бой")

choice = input("Выберите действие: ")

if choice == "1":
  name = input("Введите имя покемона: ")
  if any(p["name"] == name for p in team):
    print("Этот покемон уже в команде!")
  else:
    data = get_pokemon_data(name)
    if data:
      team.append(data)
      print(f"{name} добавлен в команду!")
    else:
      print("Покемон не найден.")

elif choice == "2":
  name = input("Введите имя покемона для удаления: ")
  for i, p in enumerate(team):
      if p["name"] == name:
          del team[i]
      print(f"{name} удален из команды!")
      break
  else:
      print("Покемон не найден в команде.")
elif choice == "3":
  if team:
    for p in team:
      print(f"\n--- {p['name']} ---")
      print(f"ID: {p['id']}")
      print(f"Типы: {', '.join(p['types'])}")
      print(f"Способности: {', '.join(p['abilities'])}")
      print("Статы:")
    for stat_name, stat_value in p['stats'].items():
        print(f"  {stat_name.capitalize()}: {stat_value}")
  else:
      print("Команда пуста.")
elif choice == "4":
  name = input("Введите имя покемона для поиска: ")
  for p in team:
    if p["name"] == name:
        print(f"\n--- {p['name']} ---")
        print(f"ID: {p['id']}")
        print(f"Типы: {', '.join(p['types'])}")
        print(f"Способности: {', '.join(p['abilities'])}")
        print("Статы:")
        for stat_name, stat_value in p['stats'].items():
            print(f"  {stat_name.capitalize()}: {stat_value}")
        break
  else:
      print("Покемон не найден в команде.")

elif choice == "5":
    if len(team) < 2:
        print("Необходимо минимум два покемона для боя.")
    else:
        pokemon1 = random.choice(team)
        pokemon2 = random.choice(team)
        while pokemon1 == pokemon2:
            pokemon2 = random.choice(team)
        simple_battle(pokemon1, pokemon2)

else:
  print("Неверное действие.")