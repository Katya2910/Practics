# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 0.4.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oWSaZo54AT7DTrPhj2WAbLgy7jLfN1l0

Введите ваше ФИО:
"""

Хихлушка Екатерина Дмитриевна

"""***Дисклеймер***

В данной практике запрещено использования функций:


*   sum()
*   min()
*   max()
*   average()
*   reversed()
*   sorted()
*   готовые функции или библиотеки

**Задача 1:**



Интернет-магазин предлагает следующие условия скидок:

*   Для заказов больше 1000 единиц, клиент получает скидку 5%. Если клиент использует промокод SUPERDISCOUNT, он получает скидку 10% (вместо 5%).
*  Для заказов более 5000 единиц, клиент получает скидку 15%, а использование промокода SUPERDISCOUNT увеличивает скидку до 20% (вместо 15%).

Этап 1:
Ввод:
```
Введите стоимость единицы товара: 5
Введите количество товара: 1001
Введите промокод: GiVEMEDISCONT
```

Вывод:

```
Ваша скидка: 5%
Итоговая сумма: 4754.75
```
Этап 2:

Оформите ваш код в виде функции
"""

count_of_units=int(input("Введите стоимость единицы товара: "))
count_of_goods=int(input("Введите количество товара: "))
promocode=input("Введите промокод: ")
order=count_of_units*count_of_goods
def discount():
  if order>1000:
    print("Ваша скидка: 5%")
    total = order-0.05 * order
    if promocode == 'SUPERDISCOUNT':
      print("Дополнительная скидка по промокоду: 10%")
      total= order-0.1* order
      print("Итоговая сумма: ", total)
  elif order>5000:
    print("Ваша скидка: 10%")
    total=order-0.1 * order
    if promocode == 'SUPERDISCOUNT':
      print("Дополнительная скидка по промокоду: 50%")
  return total
print(discount())

"""**Задача 2:**

Этап 1:
Напишите программу способную отфильтровать список и вывести только положительные элементы


Ввод:
```
-1 5 1 2 -3
```

Вывод:

```
5 1 2
```

Этап 2:

Оформите ваш код в виде функции
"""

A=[int(a) for a in input().split()]
def filtration():
  for a in A:
    if a<0:
      A.remove(a)
  return A
print(filtration())

"""**Задача 3:**

Этап 1:
Напишите программу реализующую Алгоритм Евклида


> Алгоритм Евклида – это алгоритм нахождения наибольшего общего делителя (НОД) пары целых чисел.

Чуть подробнее, если вы забыли: [link](https://skysmart.ru/articles/mathematic/naibolshij-obshchij-delitel)


Ввод:
```
30 18
```

Вывод:

```
6
```

Этап 2:
Оформите ваш код в виде функции

"""

a=int(input("Введите первое число: "))
b=int(input("Введите второе число: "))
def gcd(a, b):
  while a!=0 and b!=0:
     if a > b:
        a = a % b
     else:
        b = b % a
  return (a+b)
print(gcd(a, b))



"""**Задача 4:**

Этап 1:
Напишите функцию программу, которая принимает строку и возвращает список слов и количество их упомнинаний в предложении

Этап 2:
Оформите ваш код в виде функции

Ввод:
```
apple banana apple
```

Вывод:

```
apple: 2,
banana: 1
```
"""

words=input("Введите слова: ").split()
def count_words(sentence):
    unique_words=[]
    count=[]
    for word in words:
        index = -1
        for i in range(len(unique_words)):
          if unique_words[i] == word:
              index = i
              break
        if index!=-1:
            count[index] += 1
        else:
            unique_words.append(word)
            count.append(1)
        result=[]
    for i in range(len(unique_words)):
        result.append(f"{unique_words[i]}: {count[i]}")
    return result
output = count_words(words)
print(", ".join(output))

"""**Задача 5:**

Этап 1:
Детектор анаграмм Напишите программу на Python, которая принимает в качестве входных данных две строки и проверяет, являются ли они анаграммами друг друга

Этап 2:
Оформите ваш код в виде функции

Ввод:
```
listen, silent
```

Вывод:

```
True
```
"""

str1=input("Введите первое слово: ")
str2=input("Введите второе слово: ")
def isAnagram(str1, str2):
    if len(str1) != len(str2):
        return False
    str1_count={}
    for i in range(len(str1)):
        str1_count[str1[i]] = str1_count.get(str1[i], 0) + 1
    str2_count= {}
    for i in range(len(str2)):
        str2_count[str2[i]] = str2_count.get(str2[i], 0) + 1
    return str1_count == str2_count


if isAnagram(str1,str2):
  print(True)
else:
  print(False)

"""**Задача 6:**

Шифр ​​Цезаря

Напишите программу на Python, которая реализует шифр Цезаря, простой метод шифрования, который заменяет каждую букву буквой на фиксированное количество позиций вниз по алфавиту. Программа должна запрашивать у пользователя сообщение и значение сдвига, а затем шифровать и расшифровывать сообщение.
Подробнее о шифре Цезаря: [link](https://habr.com/ru/articles/534058/)

Этап 1:

Напишите код для реализации данной задачи

Этап 2:

Оформите код в виде нескольких функций:

* Зашифровывает сообщение
* Расшифровывает сообщение
"""

string = input("Введите строку: ")
step = int(input("Введите шаг шифрования: "))
alphavit = "абвгдеёжзийклмнопрстуфхцчшщъыьэюя"
crypt = ""
decrypt = ""

def crypt_message():
  for i in range(len(string)):
    global step
    number1=alphavit.index(string[i])
    global crypt
    crypt+= alphavit[number1 - step]
  return crypt

def decrypt_message():
  for i in range(len(crypt)):
    global decrypt
    number2 = alphavit.index(crypt[i])
    decrypt += alphavit[number2 + step]
  return decrypt

print("Зашифрованное сообщение:", crypt_message())
print("Расшифрованное сообщение:", decrypt_message())



"""**Задача 7**

Задача: «Банковская система»

Создайте программу Python, которая имитирует базовую банковскую систему. Система должна иметь следующие функции:

Требования
*   Система должна позволять клиентам создавать счета и хранить их балансы.
*   Система должна позволять клиентам вносить и снимать деньги со своих счетов.
*   Система должна позволять клиентам проверять свой текущий баланс.
*   Система должна позволять клиентам переводить деньги между счетами.
*   Система должна отслеживать транзакции (депозиты, снятия и переводы) и иметь возможность печатать детали транзакций.


Задачи
1. Реализуйте банковскую систему, используя только базовые конструкции Python, такие как def, lists, if, elif и else, без классов или словарей.
Определите функции для создания счетов, внесения и снятия денег, получения балансов счетов, перевода денег между счетами, а также создания и печати транзакций.
2. Напишите основную функцию, которая демонстрирует использование банковской системы путем создания счетов, внесения и снятия денег и перевода денег между счетами.
3. Бонусное задание
Реализуйте способ хранения и печати истории транзакций для каждого счета.

Ограничения
Не используйте классы или словари.
Используйте только базовые конструкции Python, такие как def, lists, if, elif и else.

"""

import random
accounts=[29456792,234560422]
money=[20000,56700]
transactions=[]
clients=["Иван","Мария"]

def create_account():
  client_name = input("Введите имя клиента: ")
  account_number = random.randint(1000000000, 9999999999)
  print("Счет создан для",client_name,"Номер счета:",account_number)

def create_deposit():
  account_number=int(input("Введите номер счета: "))
  amount=int(input("Введите сумму для внесения: "))
  for i in range(len(accounts)):
    if accounts[i] == account_number:
     accounts[i] = accounts[i] + amount
     transactions.append([account_number, "deposit", amount])
  print("Депозит",amount,"рублей","совершен на счет",account_number)

def take_off_money():
  account_number=int(input("Введите номер счета: "))
  amount=int(input("Введите сумму для снятия: "))
  for i in range(len(accounts)):
    if accounts[i] == account_number:
     accounts[i] = accounts[i] - amount
     transactions.append([account_number, "deposit", amount])
  print("Снято",amount,"рублей")

def balance_of_account():
  account_number=int(input("Введите номер счета: "))
  for i in range(len(accounts)):
    if accounts[i] == account_number:
      print(f"Баланс счета",account_number, "равен",money[i])

def transfer_of_money():
  from_account=int(input("Введите номер счета отправителя: "))
  to_account=int(input("Введите номер счета получателя: "))
  amount=int(input("Введите сумму для перевода: "))
  for i in range(len(accounts)):
    if accounts[i] == from_account:
      if accounts[i] >= amount:
          accounts[i] = accounts[i] - amount
          transactions.append([from_account, "transfer", amount, to_account])
          for j in range(len(accounts)):
            if accounts[j]==to_account:
              accounts[j]=accounts[j] + amount
              print(f"Перевод",amount,"рублей","со счета",from_account, "на счет",to_account, "успешен")
      else:
          print(f"Недостаточно средств на счете {from_account}.")

def history_of_transfer():
  account_number=int(input("Введите номер счета: "))
  print("История транзакций для счета",account_number)
  for transaction in transactions:
    if transaction[0]==account_number:
      if transaction[1]=="deposit":
        print("Внесение:", transaction[2])
      elif transaction[1]=="withdraw":
        print("Снятие:",transaction[2])
      elif transaction[1]=="transfer":
        print("Перевод:",transaction[2], "на счет", transaction[3])

print("\nВыберите действие:")
print("1. Создать счёт")
print("2. Внести деньги")
print("3. Снять деньги")
print("4. Проверить баланс")
print("5. Перевести деньги")
print("6. Посмотреть транзакции")

choice=int(input("Введите номер действия: "))
if choice==1:
  create_account()
elif choice==2:
  create_deposit()
elif choice==3:
  take_off_money()
elif choice==4:
  balance_of_account()
elif choice==5:
  transfer_of_money()
elif choice==6:
  history_of_transfer()